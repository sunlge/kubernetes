kubectl set image deployment myapp myapp=ikuberntes/myapp:v2	##升级操作
kubectl rollout status deployment myapp		##显示更新过程
kubectl rollout undo deployment myapp		##回滚操作
kubectl delete -f test.yaml					##删除以这个yaml文件创建的resource

kubectl api-versions		##核心资源群组
kubectl port-forward		##资源名
kubectl run --generator=run/v1 mytest --image=ikubernetes/myapp:v1 --port=80 --replicas=1	##创建一个Replication Controller

kubectl get deployments myapp-test  -o custom-columns=NAME:metadata.name					##显示特定字段，中间","号隔开
kubectl explain pods		##资源定义帮助
kubectl explain pods.spec	##资源定义帮助 

kubectl get deployments myapp-test -o yaml --export >> s.yaml	##基于现在的Deployments生成一个yaml模板


kubectl get pods --show-labels			##查看标签
kubectl get pods -L run					##仅仅显示key值run的values
kubectl get pods -l run --show-labels	##仅显示key值为run的标签pod
kubectl label pods pod-use run=pod-use	##为pod-use打标签
kubectl get nodes -l 'disktype'			##查看node节点label。

kubectl label pod pod-use run=testing --overwrite			##重新设置更改标签
kubectl get pods -l "run in (myapp-test01,testing)" -L run	##基于集合关系标签使用法
kubectl label nodes node01.sunlge.com disktype=ssd			##为node节点添加labels。

hostPort与NodePort类型的区别为hostPort是通过pod对象所在节点的IP地址来进行端口暴露。

kubectl explain pod.spec.containers.imagePullPolicy	##镜像获取策略字段
	Always：总是到仓库下载
	Never：不到仓库下载，只用本地的
	IfNotPresent：本地有则无需下载
	
kubectl explain pod.spec.containers.ports			##容器端口暴露，用于说明。
kubectl explain pod.spec.containers.env				##环境变量字段
kubectl explain pod.spec.securityContext			##设置安全权限字段
kubectl explain pod.spec.initContainers				##初始化容器，它完成以后才会启动main容器
kubectl explain pod.spec.restartPolicy				##设置容器重启策略
	Always：一旦pod中容器挂了就重启
	OnFailure：只有状态为错误才重启
	Never：挂了就挂了，不会重启

kubectl explain pod.spec.hostNetwork		##true为使用节点网络
kubectl explain pod.spec.nodeSelector		##创建标签选择器，节点的

	liveness：是否存活
	readiness：是否可以正常提供服务

kubectl explain pod.spec.containers.lifecycle		##生命周期字段
kubectl explain pod.spec.containers.livenessProbe	##存活性探测段，以及探测行为属性
kubectl explain pod.spec.containers.livenessProbe.tcpSocket		##TCP探针字段
kubectl explain pod.spec.containers.readinessProbe	##就绪性探测段
kubectl explain pod.spec.containers.resources		##资源限制字段
	limits：硬限制，最大可用多少资源
	requests：软限制，定义确保可用值



###########################################################


##打补兵更新
kubectl patch deployment myapp-deploy -p '{"spec":{"replicas":5}}'	
kubectl patch deployment myapp-deploy -p '{"spec":{"containers":["name":"myapp","image":"ikuberntes/myapp:v2"]}}

kubectl set image deployments myapp-deploy myapp=ikubernetes/myapp:v2	##更改镜像

kubectl delete pods -l app=myapp-pod					##一次性删除拥有app=myapp-pod标签的pod
kubectl delete replicasets myapp-rs --cascade=false		##将由控制器管理的pod变为用户自主式管理的Pod

kubectl explain deployments.spec.strategy.rollingUpdate					##控制滚动更新pod数量字段(一次更新多少个pod数量)
kubectl explain deployments.spec.strategy.rollingUpdate.maxSurge		##指定升级期间存在的总Pod数最多可超过期望值的个数
kubectl explain deployments.spec.strategy.rollingUpdate.maxUnavailable	##升级期间正常可用的Pod数

kubectl explain deployments.spec.minReadySeconds		##控制更新速度，pod创建后等待多久视为就绪
kubectl explain deployments.spec.revisionHistoryLimit	##控制器可保存的历史版本数量，还需使用命令 --record

kubectl rollout status deployments myapp-deploy			##打印滚动更新过程的状态信息
kubectl rollout pause deployments myapp-deploy			##暂停更新操作
kubectl rollout resume deployments myapp-deploy			##恢复更新操作

kubectl rollout undo deployments myapp-deploy			##回滚到上一个版本
kubectl rollout history deployments myapp-deploy		##查看历史版本信息
kubectl rollout undo deployments myapp-deploy	--to-revision	##指定revision号回滚特定版本

DaemonSet控制器：
	需要在每一个Node节点上运行一个Pod资源，并且需要先于其他Pod资源启动时，才有需要。
	Node-Selector字段为空代表需要每一个Node上都需要运行一个Pod资源
	其他的操作方式大致于Deployments Controller类似。
	
Job控制器：
	用于调配Pod对象运行一次性任务。
	位于API群组的 batch/v1 中

kubectl explain jobs.spec.parallelism		##设置作业并行度属性
kubectl explain jobs.spec.completion		##设置总任务数，以串行方式执行
kubectl explain jobs.spec.activeDeadlineSeconds		##指定最大活动时间长度，超出此时长被终止

Cronjob控制器：
	在未来某时间点运行作业一次
	在指定的时间点重复运行作业
	
kubectl explain cronjob --api-version='batch/v1beta1'	##查看cronjob的资源清单

Pod中断预算
	自愿中断
	非自愿中断

##如何去定义一个PDB
	
apiVersion: policy/v1beta1
kind: PodDisruptionBudget
metadata:
  name: myapp-pdb
spec:
  minAvailable: 2
  selector:
    matchLabels:
      app: myapp

