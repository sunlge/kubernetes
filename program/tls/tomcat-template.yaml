#此资源是给ingress-controoler也就是nginx的pod资源创建一个service资源，让它暴露在集群的节点当中。
apiVersion: v1
kind: Service
metadata:
  name: ingress-service
  namespace: ingress-nginx
spec:
  type: NodePort
  clusterIP: 10.99.99.99
  ports:
    - port: 80
      name: http
      nodePort: 30080
    - port: 443
      name: https
      nodePort: 30443
  selector:
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/part-of: ingress-nginx

---
apiVersion: v1
kind: Namespace
metadata:
  name: test-ingress
  labels: 
    env: test-ingress

---
##创建后端的Pod服务资源
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: tomcat-deployment
  name: tomcat-deployment
  namespace: test-ingress
spec:
  replicas: 2
  selector:
    matchLabels:
      app: tomcat-Pod-ingress
  template:
    metadata:
      labels:
        app: tomcat-Pod-ingress
    spec:
      containers:
      - image: tomcat:8.0.50-jre8-alpine
        name: tomcat-deployment
        ports:
        - name: http
          containerPort: 8080
        - name: ajpport
          containerPort: 8009

---
##创建一个Serivce资源，用来标识后端的Pod，ingress资源通过这个资源可以直接使用各Pod对象的IP地址与它直接进行通信，而不经由Service原理代理和调度。
apiVersion: v1
kind: Service
metadata:
  name: tomcat-svc
  namespace: test-ingress
  labels:
    app: tomcat-svc
spec:
  selector:
    app: tomcat-Pod-ingress
  ports:
  - name: http
    port: 8080
    targetPort: 8080
    protocol: TCP

#---
##建立一个ingress资源，通过它的FQDN主机名或者URL路径等来建立一些规则。它通过service资源去标识后端Pod，将后端的Pod的信息直接注入到ingress-controoler中。
#apiVersion: extensions/v1beta1
#kind: Ingress
#metadata:
#  name: ingress-tomcat
#  namespace: test-ingress
#spec:
#  rules:
#  - host: master.sunlge.com
#    http:
#      paths:
#      - path: /
#        backend:
#         serviceName: tomcat-svc
#         servicePort: 8080  #定义的就是后端svc所暴露的端口
